resource "aws_vpc" "main" {
 cidr_block = "10.0.0.0/16"
 
 tags = {
   Name = "Project VPC"
 }
}

resource "aws_subnet" "public_subnets" {
 count             = length(var.public_subnet_cidrs)
 vpc_id            = aws_vpc.main.id
 cidr_block        = element(var.public_subnet_cidrs, count.index)
 availability_zone = element(var.azs, count.index)
 
 tags = {
   Name = "Public Subnet ${count.index + 1}"
 }
}
 
resource "aws_subnet" "private_subnets" {
 count             = length(var.private_subnet_cidrs)
 vpc_id            = aws_vpc.main.id
 cidr_block        = element(var.private_subnet_cidrs, count.index)
 availability_zone = element(var.azs, count.index)
 
 tags = {
   Name = "Private Subnet ${count.index + 1}"
 }
}

#data "aws_key_pair" "my_server_key" {
#  key_name           = "my_server_key"
#  include_public_key = true
#  filter {
#    name   = "tag:Component"
#    values = ["my_server_key"]
#  }
#}

data "aws_subnet" "public_subnets" {
  filter {
    name   = "tag:Name"
    values = ["Public Subnet 1"]
  }
    depends_on = [
    aws_subnet.public_subnets
  ]
}
resource "aws_internet_gateway" "gw" {
 vpc_id = aws_vpc.main.id
 
 tags = {
   Name = "Project VPC IG"
 }
}

resource "aws_route_table" "second_rt" {
 vpc_id = aws_vpc.main.id
 
 route {
   cidr_block = "0.0.0.0/0"
   gateway_id = aws_internet_gateway.gw.id
 }
 
 tags = {
   Name = "2nd Route Table"
 }
}

resource "aws_route_table_association" "public_subnet_asso" {
 count = length(var.public_subnet_cidrs)
 subnet_id      = element(aws_subnet.public_subnets[*].id, count.index)
 route_table_id = aws_route_table.second_rt.id
}

#resource "tls_private_key" "pk" {
#  algorithm = "RSA"
#  rsa_bits  = 4096
#}
#
#resource "aws_key_pair" "kp" {
#  key_name   = "myKey"       # Create "myKey" to AWS!!
#  public_key = tls_private_key.pk.public_key_openssh 
#  provisioner "local-exec" { # Create "myKey.pem" to your computer!!
#    command = "echo '${tls_private_key.pk.private_key_pem}' > ./myKey.pem"
#  }
#}

resource "tls_private_key" "dev_key" {
  algorithm = "RSA"
  rsa_bits  = 4096
}

resource "aws_key_pair" "generated_key" {
  key_name   = var.generated_key_name
  public_key = tls_private_key.dev_key.public_key_openssh

  provisioner "local-exec" {    # Generate "terraform-key-pair.pem" in current directory
    command = <<-EOT
      echo '${tls_private_key.dev_key.private_key_pem}' > ./'${var.generated_key_name}'.pem
      chmod 600 ./'${var.generated_key_name}'.pem
    EOT
  }

}


resource "aws_instance" "dk-webserver" {
    ami = "ami-0f58b397bc5c1f2e8"
    instance_type = "t2.micro"
    associate_public_ip_address = true
    #key_name = aws_key_pair.generated_key.id
    key_name = aws_key_pair.dk-pub-key.id
    subnet_id = data.aws_subnet.public_subnets.id
    vpc_security_group_ids = [aws_security_group.dk-sg.id]

    tags = {
        Name = "dk-webserver-terraform"
    }
}

output "ec2_global_ips" {
  value = "${aws_instance.dk-webserver.*.public_ip}"
}
output "ssh_key" {
  description = "ssh key generated by terraform"
  value       = tls_private_key.dev_key.id
  sensitive = false
}

resource "aws_key_pair" "dk-pub-key" {
  key_name   = "dk-pub-key"
  public_key = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIHlNhyWKzbBMKOCdPaGLmT7di7NuFu468zJbP6pR5O5n ubuntu@ip-172-31-33-82"
  #public_key = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC158q8Nxurx4tRYpAPCgGkTXmEmnluUv0EAyYKjGBdirGDSabDOR6XttX0LDUHgRzyprC08R3DGBzBNHP/tPLOhdsntdiy75R+y0Hz5/IfBwkZB2sSdzTX6Gc069xznMWHc/cJA9XOdNnMSuYbGtXyJyfuIPjEyARmmDvpYFKZo/GTfJuOP0jpWxbTHNNYu7SxjzMNgQt2ZJa188LdFRfjEqPPM8IFhavUyFqyzt9/Dt7GcHgIu0EBXHUmU0VJvqmxx/H8VCibHnP1HX6H+jd6+vuD9o6VJR9MQUp/RsEnl1QAEFK8HwrpvdOiXXjM+WRkL1EegAiK4EmVmQpon55j dharmendra"
}


resource "aws_security_group" "dk-sg" {
  name        = "dk-sg"
  description = "Allow TLS inbound traffic and all outbound traffic"
  vpc_id      = aws_vpc.main.id
  tags = {
    Name = "dk_sg"
  }
}
resource "aws_vpc_security_group_ingress_rule" "allow_tls_ipv4" {
  security_group_id = aws_security_group.dk-sg.id
  cidr_ipv4         = aws_vpc.main.cidr_block
  from_port         = 22
  ip_protocol       = "tcp"
  to_port           = 22
}

resource "aws_vpc_security_group_ingress_rule" "ping-allow_tls_ipv4" {
  security_group_id = aws_security_group.dk-sg.id
  cidr_ipv4         = aws_vpc.main.cidr_block
  from_port         = -1
  ip_protocol       = "icmp"
  to_port           = -1
}
resource "aws_vpc_security_group_ingress_rule" "my-ip-allowed" {
  security_group_id = aws_security_group.dk-sg.id
  cidr_ipv4         = "106.215.220.62/32"
  ip_protocol       = "tcp"
  from_port         = 22
  to_port           = 22
}
resource "aws_vpc_security_group_ingress_rule" "my-ip-allowed-web" {
  security_group_id = aws_security_group.dk-sg.id
  cidr_ipv4         = "13.127.176.22/32"
  ip_protocol       = "tcp"
  from_port         = 22
  to_port           = 22
}
resource "aws_vpc_security_group_egress_rule" "allow_all_traffic_ipv4" {
  security_group_id = aws_security_group.dk-sg.id
  cidr_ipv4         = "0.0.0.0/0"
  ip_protocol       = "-1" # semantically equivalent to all ports
}

resource "aws_vpc_security_group_ingress_rule" "all-allow_all_traffic_ipv4" {
  security_group_id = aws_security_group.dk-sg.id
  cidr_ipv4         = "0.0.0.0/0"
  ip_protocol       = "-1" # semantically equivalent to all ports
}
